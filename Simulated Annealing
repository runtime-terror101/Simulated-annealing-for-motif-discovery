{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Assignment 4\n",
    "### Juhi Pandey\n",
    "### 2018393\n",
    "\n",
    "Simulated Annealing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Importing relevant packages*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "import math"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Returns a random motif of given length*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def random_motif(length_motif):\n",
    "    motif = \"\"\n",
    "    n = [\"a\", \"t\", \"c\", \"g\"]\n",
    "    for i in range(length_motif):\n",
    "        motif += random.choice(n)\n",
    "    return motif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Hamming score returns score equal to the number of matching nucleotides in 2 sequences, more the similarity higher the score*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def hamming_score(s1, s2):\n",
    "    sc = 0\n",
    "    for i in range(len(s1)):\n",
    "        if s1[i] == s2[i]:\n",
    "            sc += 1\n",
    "    return sc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Cost function to maximise score and return it*\n",
    "This calculates score by fiding max hamming score for each sequence and then adding scores for all sequences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cost_function(list_dna, motif):\n",
    "    cum_score = 0\n",
    "    length_motif = len(motif)\n",
    "    for dna in list_dna:\n",
    "        score = 0\n",
    "        for ind in range(len(list_dna[0])-length_motif+1):\n",
    "            score = max(score, hamming_score(motif, dna[ind: ind+length_motif]))\n",
    "            # print(\"ham\", motif, dna[ind: ind+length_motif])\n",
    "        cum_score += score\n",
    "        # maximise cumulative score\n",
    "    return cum_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*find_neighbour returns a sequence with max 2 mutations*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_neighbour(motif):\n",
    "    # max 2 mutations\n",
    "    pos1 = random.randint(0, len(motif)-1)\n",
    "    pos2 = random.randint(0, len(motif)-1)\n",
    "    motif = motif[:pos1] + random.choice([\"a\", \"t\", \"c\", \"g\"]) + motif[pos1 + 1:]\n",
    "    motif = motif[:pos2] + random.choice([\"a\", \"t\", \"c\", \"g\"]) + motif[pos2 + 1:]\n",
    "    return motif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Function that performs simulated annealing** <br>\n",
    "Calls functions to find random motif, calculates its cost and while conditions are favorable, keeps finding neighbours and updating scores, changes t every iteration<br>\n",
    "Runs for maximum 500 iterations if loop doesn't break<br>\n",
    "Finds best motif match and prints it<br>\n",
    "Also plots a graph to show costs and iterations\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulated_annealing(list_dna, length_motif):\n",
    "    motif = random_motif(length_motif)\n",
    "    cost_new = cost_function(list_dna, motif)\n",
    "    cost_old = 0\n",
    "    final_motif = \"\"\n",
    "\n",
    "    plt.xlabel('Iterations')\n",
    "    plt.ylabel('Cost')\n",
    "    time = 1\n",
    "    flag = True\n",
    "    iterations = 0\n",
    "    t = 2000\n",
    "    while flag:\n",
    "        # print(cost_new, motif)\n",
    "        iterations += 1\n",
    "        plt.plot(time, cost_new, color='black', marker='o', markersize=0.3)\n",
    "        time += 1\n",
    "        neighbour = find_neighbour(motif)\n",
    "        cost_old = cost_new\n",
    "        cost_new = cost_function(list_dna, neighbour)\n",
    "        max_cost = 0\n",
    "        if cost_new > max_cost:\n",
    "            max_cost = cost_new\n",
    "            final_motif = motif\n",
    "\n",
    "        if iterations > 500:\n",
    "            flag = False\n",
    "\n",
    "        elif cost_new >= cost_old:\n",
    "            motif = neighbour\n",
    "            \n",
    "        else:\n",
    "            try:\n",
    "                # probability of e^(-cost/t)  \n",
    "                if random.uniform(0, 1) < math.exp(-(cost_new - cost_old) / t):\n",
    "                    motif = neighbour\n",
    "\n",
    "            except:\n",
    "                flag = False\n",
    "\n",
    "\n",
    "        t *= 0.95\n",
    "\n",
    "    # plt.plot(time, cost_new, color='black', marker='o', markersize=3)\n",
    "        plt.plot([time-1, time], [cost_old, cost_new], 'k-')\n",
    "\n",
    "    \n",
    "    plt.show()\n",
    "    return final_motif\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Main Function to take inputs*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter length: 10\n",
      "Enter no of seq: 5\n",
      "agcaatcgcccgtattccgttaaagcctgcctcgctagctcgaagctg\n",
      "ggtcttgcgtgcatcgctaagctagcaaccgctagcatgcgctagcct\n",
      "gattcgaataggcaaacgcacgaagtccgttaaagctagcatcgatcg\n",
      "gctagctagcactattccgttttagcgatccgcctagccagagagatc\n",
      "ccgctcgatcgtagcggatcgctagcatttcgttatccgtgcatagcg\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "taaagttaca\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    list_dna = []\n",
    "    length_motif = int(input(\"Enter length: \"))\n",
    "    no_of_seq = int(input(\"Enter no of seq: \"))\n",
    "    for i in range(no_of_seq):\n",
    "        list_dna.append(input())\n",
    "    ans = simulated_annealing(list_dna, length_motif)\n",
    "    print(ans)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So the best match is found to be: taaagttaca"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
